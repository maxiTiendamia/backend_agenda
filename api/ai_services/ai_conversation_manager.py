import openai
import json
from datetime import datetime, timedelta, timezone
import pytz
from sqlalchemy.orm import Session
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from api.app.models import Tenant, Servicio, Empleado, Reserva, BlockedNumber
from api.utils.generador_fake_id import generar_fake_id
from google.oauth2 import service_account
from googleapiclient.discovery import build
import redis
import httpx
import re

class AIConversationManager:
    # Eliminar l√≥gica de b√∫squeda, reserva y cancelaci√≥n de turnos. Solo delega a calendar_utils.
    async def _execute_ai_function(self, function_call, telefono, business_context, tenant, db):
        """Delegar funciones de turnos a calendar_utils"""
        from api.utils import calendar_utils
        name = function_call["name"]
        args = function_call["args"]

        if name == "buscar_horarios_servicio":
            # Buscar horarios disponibles usando calendar_utils
            servicio_id = args["servicio_id"]
            preferencia_fecha = args.get("preferencia_fecha", "cualquiera")

            servicio = db.query(Servicio).filter(Servicio.id == servicio_id).first()
            if not servicio and not business_context.get("modo_directo"):
                return "‚ùå Servicio no encontrado."

            # Si el usuario especific√≥ un d√≠a espec√≠fico, ajustar l√≠mites
            max_turnos = 20 if preferencia_fecha != "cualquiera" else 10
            max_days = 7
            if preferencia_fecha and "/" in preferencia_fecha:
                try:
                    dia_str, mes_str = preferencia_fecha.split("/")
                    dia_num = int(dia_str)
                    mes_num = int(mes_str)
                    now = datetime.now(self.tz)
                    a√±o_actual = now.year
                    a√±o_objetivo = a√±o_actual + 1 if (mes_num < now.month or (mes_num == now.month and dia_num < now.day)) else a√±o_actual
                    fecha_objetivo = datetime(a√±o_objetivo, mes_num, dia_num).date()
                    dias_hasta_fecha = (fecha_objetivo - now.date()).days
                    if dias_hasta_fecha > 7:
                        max_days = min(dias_hasta_fecha + 1, 30)
                        max_turnos = 50
                except Exception:
                    pass

            if servicio and servicio.calendar_id:
                slots = calendar_utils.get_available_slots_for_service(
                    servicio,
                    intervalo_entre_turnos=getattr(tenant, "intervalo_entre_turnos", 15),
                    max_days=max_days,
                    max_turnos=max_turnos,
                    credentials_json=self.google_credentials
                )
            else:
                # Fallback directo por Tenant
                slots = calendar_utils.get_available_slots(
                    calendar_id=business_context.get("calendar_id_directo") or business_context.get("calendar_id_general"),
                    credentials_json=self.google_credentials,
                    working_hours_json=business_context.get("working_hours_directo") or business_context.get("working_hours_general"),
                    service_duration=business_context.get("duracion_turno_directo") or 60,
                    intervalo_entre_turnos=getattr(tenant, "intervalo_entre_turnos", 15),
                    max_days=max_days,
                    max_turnos=max_turnos,
                    cantidad=1,
                    solo_horas_exactas=bool(business_context.get("solo_horas_exactas_directo"))
                )

            # Filtrar slots por d√≠a espec√≠fico
            if preferencia_fecha and preferencia_fecha != "cualquiera":
                hoy = datetime.now(self.tz).date()
                fecha_objetivo = None
                if preferencia_fecha == "hoy":
                    fecha_objetivo = hoy
                elif preferencia_fecha == "ma√±ana":
                    fecha_objetivo = hoy + timedelta(days=1)
                elif "/" in preferencia_fecha:
                    try:
                        dia_str, mes_str = preferencia_fecha.split("/")
                        dia_num = int(dia_str)
                        mes_num = int(mes_str)
                        now = datetime.now(self.tz)
                        a√±o_actual = now.year
                        a√±o_objetivo = a√±o_actual + 1 if (mes_num < now.month or (mes_num == now.month and dia_num < now.day)) else a√±o_actual
                        fecha_objetivo = datetime(a√±o_objetivo, mes_num, dia_num).date()
                    except Exception:
                        fecha_objetivo = None
                elif preferencia_fecha in ["lunes", "martes", "mi√©rcoles", "jueves", "viernes", "s√°bado", "domingo"]:
                    dias_semana = {"lunes": 0, "martes": 1, "mi√©rcoles": 2, "jueves": 3, "viernes": 4, "s√°bado": 5, "domingo": 6}
                    dia_objetivo = dias_semana[preferencia_fecha]
                    dias_hasta_objetivo = (dia_objetivo - hoy.weekday()) % 7
                    dias_hasta_objetivo = 7 if dias_hasta_objetivo == 0 else dias_hasta_objetivo
                    fecha_objetivo = hoy + timedelta(days=dias_hasta_objetivo)
                if fecha_objetivo:
                    slots = [slot for slot in slots if slot.date() == fecha_objetivo]

            if not slots:
                dia_texto = preferencia_fecha if preferencia_fecha != "cualquiera" else "esta semana"
                nombre_item = servicio.nombre if servicio else (business_context.get("titulo_turno_directo") or "Turno")
                return f"üòî No hay horarios disponibles para *{nombre_item}* {dia_texto}.\n¬øQuieres elegir otro d√≠a?"

            # Determinar cu√°ntos slots mostrar (m√°s si pidieron un d√≠a espec√≠fico)
            max_to_show = 20 if preferencia_fecha != "cualquiera" else 10
            to_show = slots[:max_to_show]

            # Guardar selecci√≥n y slots en Redis (mostrar m√°s de 8 slots)
            try:
                srv_id = servicio.id if servicio else 0
                srv_nombre = servicio.nombre if servicio else (business_context.get("titulo_turno_directo") or "Turno")
                self.redis_client.set(f"servicio_seleccionado:{telefono}", json.dumps({"id": srv_id, "nombre": srv_nombre}), ex=1800)
                slots_key = f"slots:{telefono}:{srv_id}"
                slots_data = [{"numero": i, "fecha_hora": slot.isoformat(), "empleado_id": None, "empleado_nombre": "Sistema"} for i, slot in enumerate(to_show, 1)]
                self.redis_client.set(slots_key, json.dumps(slots_data), ex=1800)
                # üÜï Paginaci√≥n: guardar todos los slots y controles de p√°gina
                all_key = f"slots_all:{telefono}:{srv_id}"
                page_key = f"slots_page:{telefono}:{srv_id}"
                size_key = f"slots_page_size:{telefono}:{srv_id}"
                self.redis_client.set(all_key, json.dumps([s.isoformat() for s in slots]), ex=1800)
                self.redis_client.set(page_key, json.dumps(0), ex=1800)
                self.redis_client.set(size_key, json.dumps(max_to_show), ex=1800)
            except Exception as e:
                print(f"‚ùå Error guardando slots en Redis: {e}")

            nombre_item = servicio.nombre if servicio else (business_context.get("titulo_turno_directo") or "Turno")
            emoji_srv = self._emoji_for_service(nombre_item)
            respuesta = f"{emoji_srv} Horarios disponibles para *{nombre_item}*"
            if preferencia_fecha and preferencia_fecha != "cualquiera":
                respuesta += f" el {preferencia_fecha}"
            respuesta += ":\n\n"
            for i, slot in enumerate(to_show, 1):
                dia_nombre = ["lunes", "martes", "mi√©rcoles", "jueves", "viernes", "s√°bado", "domingo"][slot.weekday()]
                respuesta += f"{i}. {dia_nombre.title()} {slot.strftime('%d/%m %H:%M')}\n"
            # Sugerir 'm√°s' si hay m√°s p√°ginas
            if len(slots) > len(to_show):
                respuesta += "\nüìù Escribe 'm√°s' para ver m√°s horarios."
            respuesta += "\nüí¨ Escribe el n√∫mero que prefieres para confirmar."
            return respuesta

        elif name == "crear_reserva":
            servicio_id = args["servicio_id"]
            servicio = db.query(Servicio).filter(Servicio.id == servicio_id).first()
            if not servicio and not business_context.get("modo_directo"):
                return "‚ùå Servicio no encontrado."
            fecha_hora = args["fecha_hora"]
            nombre_cliente = args["nombre_cliente"]
            slot_dt = datetime.fromisoformat(fecha_hora)
            try:
                if servicio and servicio.calendar_id:
                    event_id = calendar_utils.create_event_for_service(servicio, slot_dt, telefono, self.google_credentials, nombre_cliente)
                    empleado_nombre = "Sistema"
                    empleado_calendar_id = servicio.calendar_id
                    servicio_nombre = servicio.nombre
                else:
                    event_id = calendar_utils.create_event_for_tenant_directo(
                        calendar_id=business_context.get("calendar_id_directo") or business_context.get("calendar_id_general"),
                        duracion_minutos=business_context.get("duracion_turno_directo") or 60,
                        fecha_hora=slot_dt,
                        telefono=telefono,
                        credentials_json=self.google_credentials,
                        nombre_cliente=nombre_cliente,
                        titulo_evento=business_context.get("titulo_turno_directo") or "Turno"
                    )
                    empleado_nombre = "Sistema"
                    empleado_calendar_id = business_context.get("calendar_id_directo") or business_context.get("calendar_id_general")
                    servicio_nombre = business_context.get("titulo_turno_directo") or "Turno"

                nueva_reserva = Reserva(
                    fake_id=generar_fake_id(),
                    event_id=event_id,
                    empresa=tenant.comercio,
                    empleado_id=None,
                    empleado_nombre=empleado_nombre,
                    empleado_calendar_id=empleado_calendar_id,
                    cliente_nombre=nombre_cliente,
                    cliente_telefono=telefono,
                    fecha_reserva=slot_dt,
                    servicio=servicio_nombre,
                    estado="activo",
                    cantidad=args.get("cantidad", 1)
                )
                db.add(nueva_reserva)
                db.commit()
                return f"‚úÖ Reserva confirmada para {servicio_nombre} el {slot_dt.strftime('%d/%m %H:%M')} a nombre de {nombre_cliente}.\nüîñ C√≥digo: {nueva_reserva.fake_id}"
            except Exception as e:
                return f"‚ùå Error al crear la reserva: {e}"

        elif name == "cancelar_reserva":
            codigo_reserva = args["codigo_reserva"]
            calendar_id = business_context.get("calendar_id_directo") or business_context.get("calendar_id_general") or "primary"
            try:
                ok = calendar_utils.cancelar_evento_google(calendar_id, codigo_reserva, self.google_credentials)
                return "‚úÖ Reserva cancelada correctamente." if ok else "‚ùå No se pudo cancelar la reserva."
            except Exception as e:
                return f"‚ùå Error al cancelar la reserva: {e}"

        return "Funci√≥n no implementada."

    def _generar_respuesta_fallback(self, mensaje, user_history, business_context):
        """Respuesta fallback si falla la IA"""
        return self._add_help_footer("Disculpa, tuve un problema procesando tu mensaje. ¬øPodr√≠as intentar de nuevo?")
    def __init__(self, api_key, redis_client):
        self.client = openai.OpenAI(api_key=api_key)
        self.redis_client = redis_client
        self.tz = pytz.timezone("America/Montevideo")
        self.webconnect_url = os.getenv("webconnect_url", "http://195.26.250.62:3000")  
        self.google_credentials = os.getenv("GOOGLE_CREDENTIALS_JSON")

    def _get_time_increment(self, tenant):
        """
        Devuelve el incremento de minutos entre turnos seg√∫n la configuraci√≥n del Tenant.
        """
        intervalo = getattr(tenant, 'intervalo_entre_turnos', None)
        if intervalo:
            return int(intervalo)
        return 15

    def _traducir_dia(self, dia_en):
        """Traduce el nombre de un d√≠a de la semana de ingl√©s a espa√±ol."""
        dias = {
            'monday': 'lunes',
            'tuesday': 'martes',
            'wednesday': 'mi√©rcoles',
            'thursday': 'jueves',
            'friday': 'viernes',
            'saturday': 's√°bado',
            'sunday': 'domingo',
            'lunes': 'lunes',
            'martes': 'martes',
            'mi√©rcoles': 'mi√©rcoles',
            'miercoles': 'mi√©rcoles',
            'jueves': 'jueves',
            'viernes': 'viernes',
            's√°bado': 's√°bado',
            'sabado': 's√°bado',
            'domingo': 'domingo'
        }
        return dias.get(dia_en.lower(), dia_en)
    
    def _normalize_datetime(self, dt):
        """Normaliza un datetime para que siempre tenga timezone y se convierta a self.tz."""
        if dt is None:
            return None
        # Si no tiene tz, asumir UTC y convertir a la zona horaria configurada
        if getattr(dt, 'tzinfo', None) is None:
            dt = dt.replace(tzinfo=timezone.utc)
        return dt.astimezone(self.tz)
    
    def _emoji_for_service(self, nombre_servicio: str) -> str:
        """Devolver un emoji acorde al nombre del servicio (fallback: ‚ú®)."""
        if not nombre_servicio:
            return "‚ú®"
        n = nombre_servicio.lower()
        mapping = [
            ("tre", "üßò"),
            ("somatica", "üßò"),
            ("som√°tica", "üßò"),
            ("masaje", "üíÜ"),
            ("terapia", "üß†"),
            ("grupal", "üë•"),
            ("equipos", "üßë‚Äçü§ù‚Äçüßë"),
            ("taller", "üßë‚Äçüè´"),
            ("charla", "üó£Ô∏è"),
            ("jornada", "üßë‚Äçüè´"),
            ("uno a uno", "üë§"),
        ]
        for kw, emoji in mapping:
            if kw in n:
                return emoji
        return "‚ú®"
    
    def _wants_more_info(self, mensaje: str) -> bool:
        """Detecta si el usuario pide expl√≠citamente m√°s detalles."""
        msg = (mensaje or "").lower()
        triggers = [
            "m√°s info", "mas info", "ver m√°s", "ver mas", "detalles",
            "info completa", "biografia completa", "biograf√≠a completa", "ver todo", "ampliar"
        ]
        return any(t in msg for t in triggers)

    def _first_paragraphs(self, text: str, max_paragraphs: int = 1, max_chars: int = 320) -> str:
        """Resumen inteligente: toma 1-2 frases iniciales y limita por caracteres.
        Fallback: primeros p√°rrafos con l√≠mite de caracteres.
        """
        if not text:
            return ""
        raw = text.strip()
        # 1) Intentar por frases (m√°x 2) y cortar por caracteres
        try:
            import re
            sentences = [s.strip() for s in re.split(r"(?<=[\.!?])\s+", raw) if s.strip()]
            if sentences:
                resumen = " ".join(sentences[:2])
                if len(resumen) > max_chars:
                    return resumen[:max_chars - 1].rstrip() + "‚Ä¶"
                return resumen
        except Exception:
            pass
        # 2) Fallback: primeros p√°rrafos
        paras = [p.strip() for p in raw.split("\n\n") if p.strip()]
        summary_parts = []
        total = 0
        for p in paras:
            if len(summary_parts) >= max_paragraphs:
                break
            if total + len(p) + 2 > max_chars and summary_parts:
                break
            summary_parts.append(p)
            total += len(p) + 2
        summary = "\n\n".join(summary_parts)
        if not summary:
            summary = raw[:max_chars - 1].rstrip() + ("‚Ä¶" if len(raw) > max_chars else "")
        return summary

    def _format_business_info(self, tenant, business_context, full: bool = False) -> str:
        """Construye un texto informativo; por defecto resumido, o completo si full=True."""
        nombre_publico = tenant.comercio or (f"{getattr(tenant, 'nombre', '')} {getattr(tenant, 'apellido', '')}".strip() or "Nuestro espacio")
        info_local = (business_context.get("informacion_local") or "").strip()
        telefono = business_context.get("telefono") or ""
        direccion = business_context.get("direccion") or ""

        partes = []
        partes.append(f"‚ú® Sobre {nombre_publico}")
        if info_local:
            texto = info_local if full else self._first_paragraphs(info_local, max_paragraphs=1, max_chars=320)
            partes.append(texto)
            if not full:
                partes.append("‚ÑπÔ∏è Si quer√©s, te env√≠o m√°s detalles. Decime 'm√°s info' o 'biograf√≠a completa'.")
        if telefono or direccion:
            contacto = []
            if direccion:
                contacto.append(f"üìç Direcci√≥n: {direccion}")
            if telefono:
                contacto.append(f"üìû Tel√©fono: {telefono}")
            partes.append("\n".join(contacto))
        partes.append("\nüí¨ ¬øTe gustar√≠a reservar o ver los servicios disponibles? Escribe 'servicios' o pedime un d√≠a (hoy/ma√±ana).")
        return "\n\n".join([p for p in partes if p])

    def _respuesta_info_servicio(self, servicio: dict, business_context: dict, full: bool = False, add_footer: bool = True) -> str:
        """Formatea una respuesta informativa de un servicio, breve o completa seg√∫n 'full'.
        Si add_footer=False, devuelve solo la tarjeta sin el pie de ayuda.
        """
        nombre = servicio.get("nombre", "Servicio")
        desc = (servicio.get("mensaje_personalizado") or "").strip()
        if not desc:
            # Intentar enriquecer desde informacion_local si existe
            desc = self._extract_service_info_from_tenant_info(nombre, business_context.get("informacion_local") or "") or ""

        # Breve siempre primero; completo s√≥lo si piden m√°s info
        cuerpo = desc if (full and desc) else self._first_paragraphs(desc, max_paragraphs=2, max_chars=420)

        bullets = []
        dur = servicio.get("duracion")
        if dur:
            bullets.append(f"‚è±Ô∏è Duraci√≥n: {dur} min")
        precio = servicio.get("precio")
        if isinstance(precio, (int, float)) and precio > 0:
            bullets.append(f"üí≤ Precio: {precio}")

        partes = [f"‚ú® *{nombre}*"]
        if cuerpo:
            partes.append(cuerpo)
        if bullets:
            partes.append(" ¬∑ ".join(bullets))

        # Cerrar con CTA √∫til
        if full:
            partes.append("\nüìÖ ¬øQueres ver horarios disponibles para este servicio?")
        else:
            partes.append(f"\nüëâ Si quer√©s m√°s detalles, decime ‚Äúm√°s info de {nombre}‚Äù, o pedime horarios con ‚Äúver turnos de {nombre}‚Äù.")

        cuerpo_msg = "\n".join(p for p in partes if p).strip()
        return self._add_help_footer(cuerpo_msg) if add_footer else cuerpo_msg

    def _preguntar_dia_disponible(self, servicio_seleccionado, telefono):
        """Pregunta al usuario por el d√≠a que desea para el servicio seleccionado e incluye detalles del servicio si existen."""
        tipo_servicio = self._emoji_for_service(servicio_seleccionado['nombre'])
        respuesta = f"{tipo_servicio} *{servicio_seleccionado['nombre']}*\n"
        # Agregar detalles ricos del servicio si est√°n disponibles
        desc = (servicio_seleccionado.get('mensaje_personalizado') or '').strip()
        precio = servicio_seleccionado.get('precio')
        duracion = servicio_seleccionado.get('duracion')
        extras = []
        if desc:
            # No truncamos agresivo para mantenerlo nutritivo; WhatsApp soporta mensajes extensos
            extras.append(desc)
        info_basica = []
        if duracion:
            info_basica.append(f"‚è±Ô∏è Duraci√≥n: {duracion} min")
        if isinstance(precio, (int, float)) and precio > 0:
            info_basica.append(f"üí≤ Precio: {precio}")
        if info_basica:
            extras.append(" ¬∑ ".join(info_basica))
        if extras:
            respuesta += "\n" + "\n".join(extras) + "\n"
        respuesta += "\nüìÖ ¬øPara qu√© d√≠a te gustar√≠a reservar?\n"
        respuesta += "Puedes responder con 'hoy', 'ma√±ana', o el nombre de un d√≠a (ejemplo: 'viernes').\n"
        respuesta += "\nüí¨ Escribe el d√≠a que prefieres."
        return self._add_help_footer(respuesta)
    
    def _get_conversation_history(self, telefono: str) -> list:
        """Obtener historial de conversaci√≥n desde Redis"""
        try:
            history_key = f"conversation:{telefono}"
            messages = self.redis_client.lrange(history_key, 0, -1)
            return [json.loads(msg) for msg in messages]
        except:
            return []
    
    def _save_conversation_message(self, telefono: str, role: str, content: str):
        """Guardar mensaje en historial de conversaci√≥n"""
        try:
            history_key = f"conversation:{telefono}"
            message = {
                "role": role,
                "content": content,
                "timestamp": datetime.now().isoformat()
            }
            self.redis_client.lpush(history_key, json.dumps(message))
            self.redis_client.expire(history_key, 3600 * 24)  # 24 horas
        except Exception as e:
            print(f"Error guardando conversaci√≥n: {e}")
    
    def _is_blocked_number(self, telefono: str, cliente_id: int, db: Session) -> bool:
        """Verificar si el n√∫mero est√° bloqueado"""
        try:
            blocked = db.query(BlockedNumber).filter(
                BlockedNumber.telefono == telefono,
                BlockedNumber.cliente_id == cliente_id
            ).first()
            return blocked is not None
        except:
            return False
    
    def _is_human_mode(self, telefono: str) -> bool:
        """Verificar si est√° en modo humano"""
        try:
            human_mode_key = f"human_mode:{telefono}"
            return self.redis_client.get(human_mode_key) == "true"
        except:
            return False
    
    def _activate_human_mode(self, telefono: str) -> bool:
        """Activar modo humano para un n√∫mero"""
        try:
            human_mode_key = f"human_mode:{telefono}"
            self.redis_client.set(human_mode_key, "true", ex=3600)  # 1 hora
            return True
        except:
            return False
    
    def _deactivate_human_mode(self, telefono: str) -> bool:
        """Desactivar modo humano (restaurar bot)"""
        try:
            human_mode_key = f"human_mode:{telefono}"
            self.redis_client.delete(human_mode_key)
            return True
        except:
            return False
    
    def _add_help_footer(self, mensaje: str) -> str:
        """Agregar pie de mensaje con opci√≥n de ayuda personalizada"""
        footer = "\n\nüí¨ _¬øNecesitas ayuda personalizada? Escribe 'ayuda persona' para hablar con nuestro equipo._"
        return mensaje + footer
    
    async def _notify_human_support(self, cliente_id: int, telefono: str, mensaje: str):
        """Notificar a soporte humano"""
        try:
            # Aqu√≠ podr√≠as implementar notificaci√≥n por email, Slack, etc.
            print(f"üö® MODO HUMANO - Cliente {cliente_id} ({telefono}): {mensaje}")
        except Exception as e:
            print(f"Error notificando soporte humano: {e}")
    
    def _get_user_history(self, telefono: str, db: Session) -> dict:
        """Obtener historial completo del usuario"""
        now_aware = datetime.now(self.tz)
        
        # üîí SEGURIDAD: Solo reservas del tel√©fono espec√≠fico
        # üìÖ FILTRADO: Solo reservas futuras (no pasadas)
        reservas_activas = db.query(Reserva).filter(
            Reserva.cliente_telefono == telefono,  # üîí Filtro de seguridad por tel√©fono
            Reserva.estado == "activo",
            Reserva.fecha_reserva > now_aware  # üìÖ Solo futuras
        ).order_by(Reserva.fecha_reserva.asc()).all()
        
        reservas_pasadas = db.query(Reserva).filter(
            Reserva.cliente_telefono == telefono,  # üîí Filtro de seguridad por tel√©fono
            Reserva.estado.in_(["completado", "cancelado"])
        ).order_by(Reserva.fecha_reserva.desc()).limit(5).all()
        
        return {
            "reservas_activas": [
                {
                    "codigo": r.fake_id,
                    "servicio": r.servicio,
                    "empleado": r.empleado_nombre,
                    "fecha": r.fecha_reserva.strftime("%d/%m %H:%M") if r.fecha_reserva else "",
                    "puede_cancelar": self._puede_cancelar_reserva(r.fecha_reserva, now_aware)
                }
                for r in reservas_activas
            ],
            "historial": [
                {
                    "servicio": r.servicio,
                    "fecha": r.fecha_reserva.strftime("%d/%m/%Y") if r.fecha_reserva else "",
                    "estado": r.estado
                }
                for r in reservas_pasadas
            ],
            "es_cliente_recurrente": len(reservas_pasadas) > 0,
            "servicio_favorito": self._get_servicio_favorito(reservas_pasadas)
        }
    
    def _get_servicio_favorito(self, reservas_pasadas):
        """Determinar servicio m√°s utilizado"""
        if not reservas_pasadas:
            return None
        
        servicios = {}
        for reserva in reservas_pasadas:
            servicios[reserva.servicio] = servicios.get(reserva.servicio, 0) + 1
        
        return max(servicios, key=servicios.get) if servicios else None
    
    def _puede_cancelar_reserva(self, fecha_reserva, now_aware):
        """Verificar si se puede cancelar una reserva"""
        if not fecha_reserva:
            return False
        
        fecha_reserva_aware = self._normalize_datetime(fecha_reserva)
        return fecha_reserva_aware > now_aware + timedelta(hours=1)
    

    async def process_message(self, telefono: str, mensaje: str, cliente_id: int, db: Session):
        """Procesar mensaje con IA m√°s natural y contextual"""
        try:
            # --- 1. OBTENER TENANT Y CONTEXTO INICIAL ---
            tenant = db.query(Tenant).filter(Tenant.id == cliente_id).first()
            if not tenant:
                return self._add_help_footer("‚ùå No encontr√© informaci√≥n del negocio.")

            mensaje_stripped = mensaje.strip().lower()
            saludos = ["hola", "buenas", "buenos d√≠as", "buenas tardes", "buenas noches", "hey", "holi", "holaa", "saludos"]

            # --- 2. FLUJO DE BIENVENIDA PERSONALIZADA (SI ES UN SALUDO) ---
            if any(mensaje_stripped.startswith(s) for s in saludos):
                # Limpiar estado previo de cualquier conversaci√≥n anterior
                self.redis_client.delete(f"servicio_seleccionado:{telefono}")
                for key in self.redis_client.scan_iter(f"slots:{telefono}:*"):
                    self.redis_client.delete(key)
                self.redis_client.delete(f"slot_seleccionado:{telefono}")

                # Verificar si hay un mensaje de bienvenida personalizado
                if tenant.mensaje_bienvenida_personalizado:
                    # Guardar el mensaje del usuario y la respuesta autom√°tica en el historial
                    # para que la IA tenga contexto de la respuesta del usuario.
                    self._save_conversation_message(telefono, "user", mensaje)
                    self._save_conversation_message(telefono, "assistant", tenant.mensaje_bienvenida_personalizado)
                    
                    # Devolver el mensaje personalizado con el pie de p√°gina de ayuda
                    return self._add_help_footer(tenant.mensaje_bienvenida_personalizado)

            # Verificar si est√° bloqueado
            if self._is_blocked_number(telefono, cliente_id, db):
                return "‚ùå Este n√∫mero est√° bloqueado."
            # Verificar modo humano
            if self._is_human_mode(telefono):
                # Comando para SALIR del modo humano (restaurar bot)
                if mensaje_stripped in ['bot', 'chatbot', 'automatico', 'volver bot', 'salir']:
                    if self._deactivate_human_mode(telefono):
                        return self._add_help_footer("ü§ñ ¬°Hola de nuevo! Volv√≠ para ayudarte con tus reservas.\n\n¬øEn qu√© puedo ayudarte?")
                # Si est√° en modo humano, solo notificar internamente y NO responder
                await self._notify_human_support(cliente_id, telefono, mensaje)
                return ""  # Respuesta vac√≠a - el bot no responde nada
            
            # Comando para ACTIVAR modo humano  
            if any(keyword in mensaje_stripped for keyword in ['ayuda persona', 'persona real', 'hablar con persona', 'soporte humano', 'operador', 'atencion personalizada']):
                if self._activate_human_mode(telefono):
                    return "üë• Te conect√© con nuestro equipo humano. A partir de ahora no recibir√°s respuestas autom√°ticas hasta que escribas 'bot' para volver al chatbot.\n\nüí° Para restaurar el bot autom√°tico, escribe 'bot'"
            
            # Obtener historial del usuario y contexto del negocio
            user_history = self._get_user_history(telefono, db)
            business_context = self._get_business_context(tenant, db)
            conversation_history = self._get_conversation_history(telefono)
            
            # Guardar mensaje del usuario (si no se guard√≥ en el flujo de bienvenida)
            self._save_conversation_message(telefono, "user", mensaje)

            # --- FLUJO DE CANCELACI√ìN ---
            if "cancelar" in mensaje_stripped or "anular" in mensaje_stripped:
                codigo_match = re.search(r'\b([A-Z0-9]{6,8})\b', mensaje.upper())  # üîß Limitar rango
                if codigo_match:
                    codigo_candidato = codigo_match.group(1)
                    # üîß VERIFICAR: Que no sea una palabra com√∫n
                    palabras_excluir = [
                        'CANCELAR', 'ANULAR', 'QUIERO', 'HACER', 'RESERVA', 'TURNO'
                    ]
                    if codigo_candidato not in palabras_excluir and re.search(r'\d', codigo_candidato):
                        return await self.cancelar_reserva(codigo_candidato, telefono, db)
                    
                # Si no hay c√≥digo v√°lido, mostrar reservas
                reservas_activas = user_history.get("reservas_activas", [])
                if not reservas_activas:
                    return self._add_help_footer("üòä No tienes reservas pr√≥ximas para cancelar.")
                
                respuesta = "üîÑ *Tus pr√≥ximas reservas:*\n\n"
                for r in reservas_activas:
                    if r['puede_cancelar']:
                        respuesta += f"‚úÖ C√≥digo: `{r['codigo']}` | {r['servicio']} el {r['fecha']}\n"
                    else:
                        respuesta += f"‚ùå C√≥digo: `{r['codigo']}` | {r['servicio']} el {r['fecha']} _(muy pr√≥xima)_\n"
                respuesta += "\nüí¨ Escribe el c√≥digo de la reserva que deseas cancelar."
                respuesta += "\n\n_Solo puedes cancelar reservas con m√°s de 1 hora de anticipaci√≥n._"
                return self._add_help_footer(respuesta)

            # --- DETECTAR C√ìDIGOS DE RESERVA (sin palabra "cancelar") ---
            # üîß MEJORAR: Solo detectar c√≥digos reales, no palabras largas
            codigo_solo = re.search(r'\b([A-Z0-9]{6,8})\b', mensaje.upper())  # Limitar a 6-8 caracteres
            if codigo_solo:
                codigo_candidato = codigo_solo.group(1)
                # üîß VERIFICAR: Que no sea una palabra com√∫n en espa√±ol
                palabras_excluir = [
                    'QUIERO', 'HACER', 'RESERVA', 'TURNO', 'HORARIO', 'CANCELAR',
                    'CODIGO', 'TENGO', 'ACTIVOS', 'DISPONIBLE', 'SERVICIO',
                    'MA√ëANA', 'TARDE', 'NOCHE', 'VIERNES', 'SABADO', 'DOMINGO'
                ]
                if codigo_candidato not in palabras_excluir:
                    # Verificar que tenga al menos algunos n√∫meros (c√≥digos reales tienen n√∫meros)
                    if re.search(r'\d', codigo_candidato):
                        return await self.cancelar_reserva(codigo_candidato, telefono, db)

            # --- CONSULTAR RESERVAS ACTIVAS ---
            if any(phrase in mensaje_stripped for phrase in [
                'turnos activos', 'reservas activas', 'que turnos tengo', 'cuales tengo',
                'mis reservas', 'mis turnos', 'reservas pendientes'
            ]):
                reservas_activas = user_history.get("reservas_activas", [])
                if not reservas_activas:
                    return self._add_help_footer("üòä No tienes reservas pr√≥ximas.")
                
                respuesta = "üìÖ *Tus pr√≥ximas reservas:*\n\n"
                for r in reservas_activas:
                    estado_icono = "‚úÖ" if r['puede_cancelar'] else "‚ùå"
                    respuesta += f"{estado_icono} `{r['codigo']}` | {r['servicio']} el {r['fecha']}\n"
                respuesta += "\nüí¨ Para cancelar, env√≠a el c√≥digo (ej: `C2HHOH`) o escribe 'cancelar + c√≥digo'."
                return self._add_help_footer(respuesta)

            # --- üîí SEGURIDAD: Detectar consultas sobre otros n√∫meros de tel√©fono ---
            numero_pattern = r'\b(?:09[0-9]{8}|59[0-9]{8})\b'  # Patrones de n√∫meros uruguayos
            numeros_encontrados = re.findall(numero_pattern, mensaje)
            if numeros_encontrados:
                for numero in numeros_encontrados:
                    if numero != telefono.replace('+', ''):  # Verificar que no sea el propio n√∫mero
                        return self._add_help_footer(f"üîí Por seguridad, solo puedo mostrar informaci√≥n de TUS reservas.\n\nüí¨ Si necesitas ayuda con tus propias reservas, puedo ayudarte. ¬øQu√© necesitas? üòä")

            # --- FLUJO DE CONSULTA DE SERVICIOS ---
            if mensaje_stripped in ["servicios", "ver servicios", "lista", "menu"]:
                return self._add_help_footer(self.mostrar_servicios(business_context))

            # --- INTENCI√ìN: INFO DE UN SERVICIO (prioritario sobre info del negocio) ---
            def _norm(s: str) -> str:
                import unicodedata
                s = (s or "").lower().strip()
                return ''.join(c for c in unicodedata.normalize('NFD', s) if unicodedata.category(c) != 'Mn')

            nmsg = _norm(mensaje)
            servicio_mencionado = None

            # 1) Si ya hay servicio en sesi√≥n (Redis) y el usuario pide "m√°s info" o "detalles"
            if self._wants_more_info(mensaje_stripped):
                servicio_guardado_json = self.redis_client.get(f"servicio_seleccionado:{telefono}")
                if servicio_guardado_json:
                    guardado = json.loads(servicio_guardado_json)
                    servicio_mencionado = next((s for s in business_context["servicios"] if s["id"] == guardado["id"]), None)
                    if servicio_mencionado:
                        return self._respuesta_info_servicio(servicio_mencionado, business_context, full=True)

            # 2) Intentar detectar servicio por nombre/alias dentro del mensaje
            if not servicio_mencionado:
                for s in business_context["servicios"]:
                    nname = _norm(s["nombre"]) if s.get("nombre") else ""
                    # tolera variantes (e.g. "tre", "t.r.e")
                    aliases = {nname, nname.replace("¬Æ", "").strip(), nname.replace(" ", ""), nname.replace(".", "")}
                    if any(a and a in nmsg for a in aliases):
                        servicio_mencionado = s
                        break
                    # matching por tokens: al menos 2 tokens del servicio presentes en el mensaje
                    tokens = [t for t in re.split(r"\s+", nname) if len(t) > 2]
                    if tokens:
                        overlap = sum(1 for t in tokens if t in nmsg)
                        if overlap >= min(2, len(tokens)):
                            servicio_mencionado = s
                            break

            # 3) Si pidi√≥ "info" y adem√°s se detect√≥ servicio -> responder info de servicio
            if servicio_mencionado and any(k in nmsg for k in ["info", "informacion", "informaci√≥n", "detalle", "detalles", "m√°s", "mas"]):
                return self._respuesta_info_servicio(servicio_mencionado, business_context, full=self._wants_more_info(mensaje_stripped))

            # --- FLUJO DE INFORMACI√ìN DEL NEGOCIO / BIO / CONTACTO ---
            info_keywords = [
                "quien sos", "qui√©n sos", "quien eres", "qui√©n eres", "quien es diego", "qui√©n es diego",
                "sobre vos", "sobre ti", "sobre diego", "sobre el negocio", "info del local", "informacion del local",
                "informaci√≥n del local", "informacion", "informaci√≥n", "contacto", "tel√©fono", "telefono",
                "direcci√≥n", "direccion", "ubicaci√≥n", "ubicacion", "horarios", "sobre mi", "sobre m√≠",
                "bio", "biografia", "biograf√≠a"
            ]
            # Si el usuario pide expl√≠citamente m√°s detalle, enviar biograf√≠a completa
            if self._wants_more_info(mensaje_stripped):
                return self._add_help_footer(self._format_business_info(tenant, business_context, full=True))
            if any(k in mensaje_stripped for k in info_keywords):
                full = self._wants_more_info(mensaje_stripped)
                return self._add_help_footer(self._format_business_info(tenant, business_context, full=full))

            # --- üîß DETECTAR CONFUSI√ìN DEL USUARIO ---
            frases_confusion = [
                'no tengo', 'no se', 'no entiendo', 'que hago', 'ayuda',
                'no encuentro', 'perdido', 'confundido'
            ]
            if any(frase in mensaje_stripped for frase in frases_confusion):
                # Si acaba de preguntar por otro n√∫mero o est√° en contexto de cancelaci√≥n, aclarar
                if any(palabra in mensaje_stripped for palabra in ['codigo', 'c√≥digos', 'reserva', 'turno']):
                    return (
                        "ü§ó ¬°No te preocupes! Te ayudo:\n\n"
                        "üìû Solo puedo ayudarte con TUS propias reservas\n"
                        "üìã Si quieres ver tus reservas: escribe 'mis reservas'\n"
                        "üÜï Si quieres hacer una nueva reserva: escribe 'quiero reservar'\n"
                        "‚ùå Si quieres cancelar: env√≠a el c√≥digo de tu reserva\n\n"
                        "üí¨ ¬øQu√© necesitas hacer? üòä\n\nüí¨ _¬øNecesitas ayuda personalizada? Escribe 'ayuda persona' para hablar con nuestro equipo._"
                    )

            # --- FLUJO PRINCIPAL CON IA ---
            respuesta = await self._ai_process_conversation_natural(
                mensaje, telefono, conversation_history, user_history, business_context, tenant, db
            )
            self._save_conversation_message(telefono, "assistant", respuesta)
            return self._add_help_footer(respuesta)

        except Exception as e:
            print(f"‚ùå Error en AI manager: {e}")
            return self._generar_respuesta_fallback(mensaje, None, None)

    def _detectar_hora_mensaje(self, mensaje: str) -> str:
        """üîß DETECTAR: Hora en diferentes formatos"""
        mensaje = mensaje.lower().strip()
        
        # Patrones de hora m√°s flexibles
        # Formato HH:MM exacto
        time_pattern = r'\b(\d{1,2}):(\d{2})\b'
        time_match = re.search(time_pattern, mensaje)
        if time_match:
            return f"{time_match.group(1).zfill(2)}:{time_match.group(2)}"
        
        # Formato "a las X" o "las X"
        hour_pattern = r'(?:a\s+las\s+|las\s+)(\d{1,2})(?:\s*h|:00|$|\s)'
        hour_match = re.search(hour_pattern, mensaje)
        if hour_match:
            hora = int(hour_match.group(1))
            return f"{hora:02d}:00"
        
        # Formato simple "X de la ma√±ana/tarde"
        simple_pattern = r'\b(\d{1,2})\s*(?:de\s*la\s*)?(?:ma√±ana|tarde|noche)?\b'
        simple_match = re.search(simple_pattern, mensaje)
        if simple_match:
            hora = int(simple_match.group(1))
            # Convertir a formato 24h si es necesario
            if hora <= 12 and ('tarde' in mensaje or 'noche' in mensaje):
                if hora != 12:
                    hora += 12
            return f"{hora:02d}:00"
        
        return None

    def _detectar_cambio_horario(self, mensaje: str) -> bool:
        """üîß DETECTAR: Si el usuario quiere cambiar de horario"""
        mensaje = mensaje.lower()
        
        # ‚ùå EXCLUIR frases que NO son cambios de horario
        exclusiones = [
            'mi nombre es', 'me llamo', 'soy ', 'nombre:'
        ]
        if any(exclusion in mensaje for exclusion in exclusiones):
            return False
        
        # ‚úÖ DETECTAR palabras de cambio solo si contienen referencia horaria
        cambio_palabras = [
            'no', 'cambiar', 'otro', 'diferente', 'mejor', 'prefiero',
            'quiero', 'no me gusta', 'no me sirve', 'no puedo'
        ]
        
        # Solo es cambio si menciona horario/tiempo Y tiene palabra de cambio
        tiene_cambio = any(palabra in mensaje for palabra in cambio_palabras)
        tiene_horario = any(palabra in mensaje for palabra in ['hora', 'las ', 'a las', 'de la', 'turno', 'horario'])
        
        return tiene_cambio and tiene_horario

    def _es_nombre_valido(self, mensaje: str) -> bool:
        """üîß VALIDAR: Si el mensaje contiene un nombre v√°lido"""
        mensaje = mensaje.lower().strip()
        
        # Patrones de nombre v√°lido
        patrones_nombre = [
            'mi nombre es', 'me llamo', 'soy ', 'nombre:'
        ]
        
        # Si contiene patr√≥n de presentaci√≥n, es nombre v√°lido
        if any(patron in mensaje for patron in patrones_nombre):
            return True
        
        # Si tiene 2+ palabras Y son palabras reales (no solo una palabra)
        palabras = mensaje.split()
        if len(palabras) >= 2:
            # Verificar que no sean referencias de horario/cambio
            referencias_horario = ['hora', 'turno', 'horario', 'las ', 'a las', 'de la']
            if not any(ref in mensaje for ref in referencias_horario):
                # Verificar que cada palabra tenga al menos 2 caracteres
                if all(len(palabra) >= 2 for palabra in palabras):
                    return True
        
        # Si es una sola palabra, debe tener al menos 4 caracteres para ser nombre v√°lido
        if len(palabras) == 1 and len(palabras[0]) >= 4:
            # Verificar que no sea una referencia t√©cnica
            referencias_no_nombre = ['cancelar', 'reservar', 'turno', 'codigo']
            if not any(ref in mensaje for ref in referencias_no_nombre):
                return False  # üîß Forzar nombres de 2+ palabras por seguridad
        
        return False

    def _extraer_nombre(self, mensaje: str) -> str:
        """üîß EXTRAER: El nombre limpio del mensaje"""
        mensaje = mensaje.strip()
        mensaje_lower = mensaje.lower()
        
        # Remover patrones de presentaci√≥n
        patrones = [
            'mi nombre es ', 'me llamo ', 'soy ', 'nombre: ', 'nombre '
        ]
        
        for patron in patrones:
            if patron in mensaje_lower:
                # Encontrar la posici√≥n del patr√≥n y extraer lo que sigue
                idx = mensaje_lower.find(patron)
                return mensaje[idx + len(patron):].strip()
        
        # Si no hay patr√≥n, devolver el mensaje completo
        return mensaje

    def _detectar_dia_mensaje(self, mensaje: str) -> str:
        """üîß CORREGIDO: Detectar qu√© d√≠a quiere el usuario"""
        mensaje_original = mensaje.lower().strip()
        
        # üîß DETECTAR fechas espec√≠ficas en formato DD/MM
        
        fecha_pattern = r'\b(\d{1,2})/(\d{1,2})\b'
        fecha_match = re.search(fecha_pattern, mensaje_original)
        if fecha_match:
            dia = int(fecha_match.group(1))
            mes = int(fecha_match.group(2))
            # Devolver en formato que pueda ser procesado despu√©s
            return f"{dia:02d}/{mes:02d}"
        
        # üîß MEJOR L√ìGICA: Buscar patrones espec√≠ficos sin modificar el mensaje globalmente
        if any(word in mensaje_original for word in ['hoy', 'today']):
            return 'hoy'
        elif any(word in mensaje_original for word in ['ma√±ana', 'tomorrow']):
            return 'ma√±ana'
        elif any(word in mensaje_original for word in ['lunes', 'monday']):
            return 'lunes'
        elif any(word in mensaje_original for word in ['martes', 'tuesday']):
            return 'martes'
        elif any(word in mensaje_original for word in ['mi√©rcoles', 'miercoles', 'wednesday']):
            return 'miercoles'
        elif any(word in mensaje_original for word in ['jueves', 'thursday']):
            return 'jueves'
        elif any(word in mensaje_original for word in ['viernes', 'vienres', 'friday']):  # üîß CORREGIR typo com√∫n
            return 'viernes'
        elif any(word in mensaje_original for word in ['s√°bado', 'sabado', 'saturday']):
            return 'sabado'
        elif any(word in mensaje_original for word in ['domingo', 'sunday']):
            return 'domingo'
        
        return None

    async def _ai_process_conversation_natural(self, mensaje, telefono, conversation_history, user_history, business_context, tenant, db):
        """üîß CORREGIDO: Procesamiento de IA m√°s natural y contextual"""
        
        mensaje_stripped = mensaje.strip().lower()

        # -------------------
        # 0) ATAJOS DETERMINISTAS ANTES DE LA IA
        # -------------------
        # 0.1) Pedido de VIDEO: responder con link inmediatamente (extra√≠do del contexto del negocio o servicios)
        def _extraer_primer_url(texto: str | None) -> str | None:
            if not texto:
                return None
            try:
                import re
                m = re.search(r"https?://\S+", texto)
                return m.group(0) if m else None
            except Exception:
                return None

        if any(k in mensaje_stripped for k in ["video", "enlace del video", "link del video", "compartime el video", "mandame el video", "ver video"]):
            # Buscar URL primero en informacion_local
            url = _extraer_primer_url(business_context.get("informacion_local") or "")
            # Si no, buscar en servicios informativos
            if not url:
                for s in business_context.get("servicios", []) or []:
                    url = _extraer_primer_url((s.get("mensaje_personalizado") or ""))
                    if url:
                        break
            if url:
                return self._add_help_footer(f"üé¨ Aqu√≠ ten√©s el video: {url}")
            else:
                # No se encontr√≥ URL concreta: responder claro sin repetir
                return self._add_help_footer("No encuentro el enlace del video en este momento. ¬øQuer√©s que te lo env√≠e por ac√° cuando est√© disponible?")

        # 0.2) "Mostrame/mandame de vuelta/otra vez los horarios" -> repetir lista de horarios (evitar info del negocio)
        if ("horarios" in mensaje_stripped) and any(p in mensaje_stripped for p in ["de vuelta", "devuelta", "otra vez", "de nuevo", "mostrar otra vez", "mostrame otra vez", "mostrame de nuevo", "ver otra vez", "ver de nuevo"]):
            # Intentar reutilizar la √∫ltima selecci√≥n y slots de Redis
            try:
                servicio_guardado_str = self.redis_client.get(f"servicio_seleccionado:{telefono}")
                if servicio_guardado_str:
                    servicio_guardado = json.loads(servicio_guardado_str)
                    srv_id = servicio_guardado.get("id", 0)
                    all_key = f"slots_all:{telefono}:{srv_id}"
                    page_key = f"slots_page:{telefono}:{srv_id}"
                    size_key = f"slots_page_size:{telefono}:{srv_id}"
                    all_raw = self.redis_client.get(all_key)
                    if all_raw:
                        from datetime import datetime as _dt
                        all_slots = [_dt.fromisoformat(x) for x in json.loads(all_raw)]
                        size = int(json.loads(self.redis_client.get(size_key) or "10"))
                        # Mostrar primera p√°gina nuevamente
                        page_slots = all_slots[:size]
                        # Regrabar p√°gina actual como 0
                        self.redis_client.set(page_key, json.dumps(0), ex=600)
                        # Regrabar lista actual visible en slots_key
                        slots_key = f"slots:{telefono}:{srv_id}"
                        slots_data = [{
                            "numero": i + 1,
                            "fecha_hora": s.isoformat(),
                            "empleado_id": None,
                            "empleado_nombre": "Sistema"
                        } for i, s in enumerate(page_slots)]
                        self.redis_client.set(slots_key, json.dumps(slots_data), ex=600)
                        # Responder
                        respuesta = f"{self._emoji_for_service(servicio_guardado.get('nombre') or 'Turno')} Horarios disponibles nuevamente:\n\n"
                        for i, s in enumerate(page_slots, 1):
                            dia_nombre = ["lunes", "martes", "mi√©rcoles", "jueves", "viernes", "s√°bado", "domingo"][s.weekday()]
                            respuesta += f"{i}. {dia_nombre.title()} {s.strftime('%d/%m %H:%M')}\n"
                        if len(all_slots) > len(page_slots):
                            respuesta += "\nüìù Escribe 'm√°s' para ver m√°s horarios."
                        respuesta += "\nüí¨ Escribe el n√∫mero que prefieres para confirmar."
                        return self._add_help_footer(respuesta)
            except Exception as _:
                pass
            # Si no hay historial en Redis, intentamos detectar d√≠a y volver a listar
            dia_detectado_tmp = self._detectar_dia_mensaje(mensaje_stripped) or "cualquiera"
            # Reutilizamos el flujo normal m√°s abajo (buscar√° y listar√°)
        
        # üîß VERIFICAR PRIMERO SI TIENE SERVICIO SELECCIONADO Y HORARIOS DISPONIBLES
        servicio_key = f"servicio_seleccionado:{telefono}"
        servicio_guardado_str = self.redis_client.get(servicio_key)
        
        if servicio_guardado_str:
            servicio_guardado = json.loads(servicio_guardado_str)
            slots_key = f"slots:{telefono}:{servicio_guardado['id']}"
            slots_data_str = self.redis_client.get(slots_key)
            if slots_data_str:
                slots_data = json.loads(slots_data_str)
                # üÜï Paginaci√≥n: comandos 'm√°s', 'siguiente', 'anterior'
                if mensaje_stripped in ["m√°s", "mas", "siguiente", "ver m√°s", "ver mas", "+"]:
                    all_key = f"slots_all:{telefono}:{servicio_guardado['id']}"
                    page_key = f"slots_page:{telefono}:{servicio_guardado['id']}"
                    size_key = f"slots_page_size:{telefono}:{servicio_guardado['id']}"
                    try:
                        all_slots_raw = self.redis_client.get(all_key)
                        if not all_slots_raw:
                            return "‚ùå No hay m√°s horarios para mostrar."
                        all_slots = [datetime.fromisoformat(x) for x in json.loads(all_slots_raw)]
                        page = int(json.loads(self.redis_client.get(page_key) or "0"))
                        size = int(json.loads(self.redis_client.get(size_key) or "10"))
                        next_page = page + 1
                        start = next_page * size
                        end = start + size
                        if start >= len(all_slots):
                            return "üòä Ya est√°s viendo los √∫ltimos horarios disponibles."
                        page_slots = all_slots[start:end]
                        # reconstruir slots_data de la p√°gina
                        slots_data = [{
                            "numero": i + 1,
                            "fecha_hora": s.isoformat(),
                            "empleado_id": None,
                            "empleado_nombre": "Sistema"
                        } for i, s in enumerate(page_slots)]
                        self.redis_client.set(slots_key, json.dumps(slots_data), ex=600)
                        self.redis_client.set(page_key, json.dumps(next_page), ex=600)
                        # Responder con la nueva p√°gina
                        respuesta = f"{self._emoji_for_service(servicio_guardado['nombre'])} Horarios disponibles (p√°gina {next_page + 1}):\n\n"
                        for i, s in enumerate(page_slots, 1):
                            dia_nombre = ["lunes", "martes", "mi√©rcoles", "jueves", "viernes", "s√°bado", "domingo"][s.weekday()]
                            respuesta += f"{i}. {dia_nombre.title()} {s.strftime('%d/%m %H:%M')}\n"
                        if end < len(all_slots):
                            respuesta += "\nüìù Escribe 'm√°s' para ver m√°s horarios."
                        if page > 0:
                            respuesta += "\n‚Ü©Ô∏è Escribe 'anterior' para ver los anteriores."
                        respuesta += "\nüí¨ Escribe el n√∫mero que prefieres para confirmar."
                        return self._add_help_footer(respuesta)
                    except Exception as e:
                        print(f"‚ùå Error en paginaci√≥n de slots: {e}")
                        return "‚ùå No pude cargar m√°s horarios ahora. Intenta nuevamente."
                if mensaje_stripped in ["anterior", "previo", "volver", "<"]:
                    all_key = f"slots_all:{telefono}:{servicio_guardado['id']}"
                    page_key = f"slots_page:{telefono}:{servicio_guardado['id']}"
                    size_key = f"slots_page_size:{telefono}:{servicio_guardado['id']}"
                    try:
                        all_slots_raw = self.redis_client.get(all_key)
                        if not all_slots_raw:
                            return "‚ùå No hay horarios previos para mostrar."
                        all_slots = [datetime.fromisoformat(x) for x in json.loads(all_slots_raw)]
                        page = int(json.loads(self.redis_client.get(page_key) or "0"))
                        size = int(json.loads(self.redis_client.get(size_key) or "10"))
                        prev_page = max(0, page - 1)
                        if page == 0:
                            return "üòä Ya est√°s en la primera lista de horarios."
                        start = prev_page * size
                        end = start + size
                        page_slots = all_slots[start:end]
                        slots_data = [{
                            "numero": i + 1,
                            "fecha_hora": s.isoformat(),
                            "empleado_id": None,
                            "empleado_nombre": "Sistema"
                        } for i, s in enumerate(page_slots)]
                        self.redis_client.set(slots_key, json.dumps(slots_data), ex=600)
                        self.redis_client.set(page_key, json.dumps(prev_page), ex=600)
                        respuesta = f"{self._emoji_for_service(servicio_guardado['nombre'])} Horarios disponibles (p√°gina {prev_page + 1}):\n\n"
                        for i, s in enumerate(page_slots, 1):
                            dia_nombre = ["lunes", "martes", "mi√©rcoles", "jueves", "viernes", "s√°bado", "domingo"][s.weekday()]
                            respuesta += f"{i}. {dia_nombre.title()} {s.strftime('%d/%m %H:%M')}\n"
                        if end < len(all_slots):
                            respuesta += "\nüìù Escribe 'm√°s' para ver m√°s horarios."
                        if prev_page > 0:
                            respuesta += "\n‚Ü©Ô∏è Escribe 'anterior' para ver los anteriores."
                        respuesta += "\nüí¨ Escribe el n√∫mero que prefieres para confirmar."
                        return self._add_help_footer(respuesta)
                    except Exception as e:
                        print(f"‚ùå Error en paginaci√≥n de slots (anterior): {e}")
                        return "‚ùå No pude cargar horarios anteriores ahora. Intenta nuevamente."
                # 1. Selecci√≥n de horario por n√∫mero
                if mensaje_stripped.isdigit():
                    try:
                        slot_numero = int(mensaje_stripped)
                        if 1 <= slot_numero <= len(slots_data):
                            slot_seleccionado = slots_data[slot_numero - 1]
                            # Guardar slot seleccionado en Redis para el paso siguiente
                            self.redis_client.set(f"slot_seleccionado:{telefono}", json.dumps(slot_seleccionado), ex=600)
                            return (
                                f"‚úÖ Elegiste:\n\n{self._emoji_for_service(servicio_guardado['nombre'])} *{servicio_guardado['nombre']}*"
                                f"\nüìÖ {datetime.fromisoformat(slot_seleccionado['fecha_hora']).strftime('%A %d/%m a las %H:%M')}"
                                "\n\nüë§ Para confirmar, por favor escribe tu *nombre completo*."
                            )
                        else:
                            return f"‚ùå Elige un n√∫mero entre 1 y {len(slots_data)}."
                    except ValueError:
                        return "‚ùå No entend√≠ el n√∫mero. Intenta de nuevo."
                # 2. Selecci√≥n de horario por hora (formatos flexibles)
                hora_detectada = self._detectar_hora_mensaje(mensaje_stripped)
                if hora_detectada:
                    for slot in slots_data:
                        slot_hora = datetime.fromisoformat(slot['fecha_hora']).strftime('%H:%M')
                        if slot_hora == hora_detectada:
                            self.redis_client.set(f"slot_seleccionado:{telefono}", json.dumps(slot), ex=600)
                            return (
                                f"‚úÖ Elegiste:\n\n{self._emoji_for_service(servicio_guardado['nombre'])} *{servicio_guardado['nombre']}*"
                                f"\nüìÖ {datetime.fromisoformat(slot['fecha_hora']).strftime('%A %d/%m a las %H:%M')}"
                                "\n\nüë§ Para confirmar, por favor escribe tu *nombre completo*."
                            )
                    return f"‚ùå No encontr√© el horario {hora_detectada}. Elige uno de los horarios numerados."
                # 3. Confirmaci√≥n de reserva O cambio de horario
                slot_seleccionado_str = self.redis_client.get(f"slot_seleccionado:{telefono}")
                if slot_seleccionado_str:
                    if self._detectar_cambio_horario(mensaje_stripped):
                        # El usuario quiere cambiar, buscar nueva hora
                        hora_nueva = self._detectar_hora_mensaje(mensaje_stripped)
                        if hora_nueva:
                            # Buscar el nuevo horario
                            for slot in slots_data:
                                slot_hora = datetime.fromisoformat(slot['fecha_hora']).strftime('%H:%M')
                                if slot_hora == hora_nueva:
                                    self.redis_client.set(f"slot_seleccionado:{telefono}", json.dumps(slot), ex=600)
                                    return (
                                        f"‚úÖ ¬°Perfecto! Cambi√© tu selecci√≥n:\n\n{self._emoji_for_service(servicio_guardado['nombre'])} *{servicio_guardado['nombre']}*"
                                        f"\nüìÖ {datetime.fromisoformat(slot['fecha_hora']).strftime('%A %d/%m a las %H:%M')}"
                                        "\n\nüë§ Para confirmar, por favor escribe tu *nombre completo*."
                                    )
                            return f"‚ùå No encontr√© el horario {hora_nueva}. Los horarios disponibles son:\n" + "\n".join([f"{i}. {datetime.fromisoformat(s['fecha_hora']).strftime('%H:%M')}" for i, s in enumerate(slots_data, 1)])
                        else:
                            # Quiere cambiar pero no especific√≥ hora nueva
                            self.redis_client.delete(f"slot_seleccionado:{telefono}")
                            return f"üîÑ ¬°Entendido! Te muestro los horarios disponibles otra vez:\n\n" + "\n".join([f"{i}. {datetime.fromisoformat(s['fecha_hora']).strftime('%H:%M')}" for i, s in enumerate(slots_data, 1)]) + "\n\nüí¨ Escribe el n√∫mero o la hora que prefieres."
                    
                    # üîß CONFIRMACI√ìN: Solo si parece un nombre (m√°s de 2 palabras o no contiene cambios)
                    elif self._es_nombre_valido(mensaje_stripped):
                        slot_seleccionado = json.loads(slot_seleccionado_str)
                        # Extraer el nombre limpio
                        nombre_cliente = self._extraer_nombre(mensaje.strip())
                        # Llamar a la funci√≥n de calendar_utils para crear la reserva
                        from api.utils import calendar_utils
                        slot_dt = datetime.fromisoformat(slot_seleccionado['fecha_hora'])
                        try:
                            if servicio_guardado['id'] == 0:
                                # Reserva directa por Tenant
                                calendar_id = business_context.get("calendar_id_directo") or business_context.get("calendar_id_general")
                                titulo_evento = business_context.get("titulo_turno_directo") or "Turno"
                                duracion = business_context.get("duracion_turno_directo") or 60
                                event_id = calendar_utils.create_event_for_tenant_directo(
                                    calendar_id=calendar_id,
                                    duracion_minutos=duracion,
                                    fecha_hora=slot_dt,
                                    telefono=telefono,
                                    credentials_json=self.google_credentials,
                                    nombre_cliente=nombre_cliente,
                                    titulo_evento=titulo_evento
                                )
                                servicio_nombre = titulo_evento
                                empleado_calendar_id = calendar_id
                            else:
                                # Reserva por Servicio
                                servicio_modelo = db.query(Servicio).filter(Servicio.id == servicio_guardado['id']).first()
                                if not servicio_modelo:
                                    return "‚ùå Servicio no disponible. Intenta de nuevo."
                                event_id = calendar_utils.create_event_for_service(
                                    servicio_modelo,
                                    slot_dt,
                                    telefono,
                                    self.google_credentials,
                                    nombre_cliente
                                )
                                servicio_nombre = servicio_modelo.nombre
                                empleado_calendar_id = servicio_modelo.calendar_id

                            # Crear reserva en la base de datos
                            nueva_reserva = Reserva(
                                fake_id=generar_fake_id(),
                                event_id=event_id,
                                empresa=tenant.comercio,
                                empleado_id=None,
                                empleado_nombre="Sistema",
                                empleado_calendar_id=empleado_calendar_id,
                                cliente_nombre=nombre_cliente,
                                cliente_telefono=telefono,
                                fecha_reserva=slot_dt,
                                servicio=servicio_nombre,
                                estado="activo",
                                cantidad=1
                            )
                            db.add(nueva_reserva)
                            db.commit()

                            # Limpiar selecci√≥n en Redis
                            self.redis_client.delete(f"servicio_seleccionado:{telefono}")
                            self.redis_client.delete(f"slots:{telefono}:{servicio_guardado['id']}")
                            self.redis_client.delete(f"slot_seleccionado:{telefono}")
                            return (
                                f"‚úÖ Reserva confirmada para *{servicio_guardado['nombre']}*"
                                f"\nüìÖ {slot_dt.strftime('%A %d/%m %H:%M')}"
                                f"\nüë§ A nombre de: {nombre_cliente}"
                                f"\nüîñ C√≥digo: {nueva_reserva.fake_id}"
                                f"\n\n¬°Gracias por reservar! üòä"
                            )
                        except Exception as e:
                            return f"‚ùå Error al crear la reserva: {e}"
                # Si no se reconoce el mensaje, pedir nombre completo
                if slot_seleccionado_str:
                    return "üë§ Por favor, escribe tu *nombre completo* para confirmar la reserva."
            # Si tiene servicio pero no slots, est√° eligiendo d√≠a
            dia_detectado = self._detectar_dia_mensaje(mensaje_stripped)
            if dia_detectado:
                # Buscar horarios disponibles para el d√≠a elegido
                from api.utils import calendar_utils
                # Obtener contexto actualizado del negocio (servicios y empleados)
                business_context = self._get_business_context(tenant, db)
                if servicio_guardado["id"] == 0:
                    # Modo directo por Tenant
                    slots = calendar_utils.get_available_slots(
                        calendar_id=business_context.get("calendar_id_directo") or business_context.get("calendar_id_general"),
                        credentials_json=self.google_credentials,
                        working_hours_json=business_context.get("working_hours_directo") or business_context.get("working_hours_general"),
                        service_duration=business_context.get("duracion_turno_directo") or 60,
                        intervalo_entre_turnos=getattr(tenant, "intervalo_entre_turnos", 15),
                        max_days=7,
                        max_turnos=25,
                        cantidad=1,
                        solo_horas_exactas=bool(business_context.get("solo_horas_exactas_directo"))
                    )
                    servicio_guardado_dict = {"id": 0, "nombre": business_context.get("titulo_turno_directo") or "Turno"}
                else:
                    servicio_guardado_dict = next((s for s in business_context["servicios"] if s["id"] == servicio_guardado["id"]), None)
                    if not servicio_guardado_dict:
                        return "‚ùå Servicio no disponible. Intenta de nuevo."
                    # Buscar el modelo Servicio por ID y pasar el modelo, no un dict
                    servicio_modelo = db.query(Servicio).filter(Servicio.id == servicio_guardado["id"]).first()
                    if not servicio_modelo:
                        return "‚ùå Servicio no disponible. Intenta de nuevo."
                    slots = calendar_utils.get_available_slots_for_service(
                        servicio_modelo,
                        intervalo_entre_turnos=getattr(tenant, "intervalo_entre_turnos", 15),
                        max_days=7,
                        max_turnos=25,  # üîß AUMENTAR para asegurar que llegue al d√≠a espec√≠fico
                        credentials_json=self.google_credentials
                    )
                # Filtrar slots por d√≠a
                tz = pytz.timezone("America/Montevideo")
                now = datetime.now(tz)
                if dia_detectado == "hoy":
                    dia_objetivo = now.date()
                elif dia_detectado == "ma√±ana":
                    dia_objetivo = (now + timedelta(days=1)).date()
                elif "/" in dia_detectado:  # üîß NUEVO: Manejar fechas espec√≠ficas DD/MM
                    try:
                        dia_str, mes_str = dia_detectado.split("/")
                        dia_num = int(dia_str)
                        mes_num = int(mes_str)
                        
                        # Determinar el a√±o (si el mes es menor al actual, asumir pr√≥ximo a√±o)
                        a√±o_actual = now.year
                        if mes_num < now.month or (mes_num == now.month and dia_num < now.day):
                            a√±o_objetivo = a√±o_actual + 1
                        else:
                            a√±o_objetivo = a√±o_actual
                        
                        dia_objetivo = datetime(a√±o_objetivo, mes_num, dia_num).date()
                        print(f"üîß DEBUG: Fecha espec√≠fica detectada: {dia_detectado} -> {dia_objetivo.strftime('%A %d/%m/%Y')}")
                    except ValueError:
                        print(f"‚ùå Error: fecha '{dia_detectado}' no v√°lida")
                        return f"‚ùå No reconozco la fecha '{dia_detectado}'. Usa formato DD/MM o nombres de d√≠as."
                else:
                    dias_semana = ["lunes", "martes", "miercoles", "jueves", "viernes", "sabado", "domingo"]
                    # Normalizar nombre del d√≠a (quitar acentos)
                    dia_normalizado = dia_detectado.replace("√©", "e").replace("√°", "a")
                    try:
                        idx = dias_semana.index(dia_normalizado)
                        hoy_idx = now.weekday()
                        dias_hasta = (idx - hoy_idx) % 7
                        if dias_hasta == 0:  # Si es hoy, tomar el pr√≥ximo de esa semana
                            dias_hasta = 7
                        dia_objetivo = (now + timedelta(days=dias_hasta)).date()
                        print(f"üîß DEBUG: D√≠a detectado: {dia_detectado}, Normalizado: {dia_normalizado}, Hoy: {now.strftime('%A %d/%m')}, Objetivo: {dia_objetivo.strftime('%A %d/%m')}")
                    except ValueError:
                        print(f"‚ùå Error: d√≠a '{dia_detectado}' no reconocido")
                        return f"‚ùå No reconozco el d√≠a '{dia_detectado}'. Usa: hoy, ma√±ana, lunes, martes, etc."
                slots_dia = [s for s in slots if s.date() == dia_objetivo]
                if not slots_dia:
                    return f"üòî No hay horarios disponibles para *{servicio_guardado_dict['nombre']}* el {dia_detectado}.\n¬øQuieres elegir otro d√≠a?"
                # Guardar slots en Redis con paginaci√≥n (20 por p√°gina cuando el d√≠a es espec√≠fico)
                srv_id = servicio_guardado_dict['id']
                all_key = f"slots_all:{telefono}:{srv_id}"
                page_key = f"slots_page:{telefono}:{srv_id}"
                size_key = f"slots_page_size:{telefono}:{srv_id}"
                page_size = 20
                self.redis_client.set(all_key, json.dumps([s.isoformat() for s in slots_dia]), ex=1800)
                self.redis_client.set(page_key, json.dumps(0), ex=1800)
                self.redis_client.set(size_key, json.dumps(page_size), ex=1800)
                # Primera p√°gina
                first_page = slots_dia[:page_size]
                slots_key = f"slots:{telefono}:{srv_id}"
                slots_data = [{
                    "numero": i,
                    "fecha_hora": slot.isoformat(),
                    "empleado_id": None,
                    "empleado_nombre": "Sistema"
                } for i, slot in enumerate(first_page, 1)]
                self.redis_client.set(slots_key, json.dumps(slots_data), ex=1800)
                respuesta = f"{self._emoji_for_service(servicio_guardado_dict['nombre'])} *Horarios para {servicio_guardado_dict['nombre']}* el {dia_detectado}:\n\n"
                respuesta += "\n".join([f"{i}. {datetime.fromisoformat(s['fecha_hora']).strftime('%H:%M')}" for i, s in enumerate(slots_data, 1)])
                if len(slots_dia) > len(first_page):
                    respuesta += "\n\nüìù Escribe 'm√°s' para ver m√°s horarios."
                respuesta += "\n\nüí¨ Escribe el n√∫mero o la hora que prefieres."
                return respuesta

        # MODO DIRECTO SIN SERVICIO SELECCIONADO: detectar d√≠a y listar horarios
        if business_context.get("modo_directo") and not servicio_guardado_str:
            dia_detectado = self._detectar_dia_mensaje(mensaje_stripped)
            if dia_detectado:
                from api.utils import calendar_utils
                slots = calendar_utils.get_available_slots(
                    calendar_id=business_context.get("calendar_id_directo") or business_context.get("calendar_id_general"),
                    credentials_json=self.google_credentials,
                    working_hours_json=business_context.get("working_hours_directo") or business_context.get("working_hours_general"),
                    service_duration=business_context.get("duracion_turno_directo") or 60,
                    intervalo_entre_turnos=getattr(tenant, "intervalo_entre_turnos", 15),
                    max_days=7,
                    max_turnos=25,
                    cantidad=1,
                    solo_horas_exactas=bool(business_context.get("solo_horas_exactas_directo"))
                )
                # Filtrar por d√≠a
                tz = pytz.timezone("America/Montevideo")
                now = datetime.now(tz)
                if dia_detectado == "hoy":
                    dia_objetivo = now.date()
                elif dia_detectado == "ma√±ana":
                    dia_objetivo = (now + timedelta(days=1)).date()
                elif "/" in dia_detectado:
                    try:
                        dia_str, mes_str = dia_detectado.split("/")
                        dia_num = int(dia_str)
                        mes_num = int(mes_str)
                        a√±o_actual = now.year
                        a√±o_objetivo = a√±o_actual + 1 if (mes_num < now.month or (mes_num == now.month and dia_num < now.day)) else a√±o_actual
                        dia_objetivo = datetime(a√±o_objetivo, mes_num, dia_num).date()
                    except ValueError:
                        return f"‚ùå No reconozco la fecha '{dia_detectado}'. Usa formato DD/MM o nombres de d√≠as."
                else:
                    dias_semana = ["lunes", "martes", "miercoles", "jueves", "viernes", "sabado", "domingo"]
                    dia_normalizado = dia_detectado.replace("√©", "e").replace("√°", "a")
                    try:
                        idx = dias_semana.index(dia_normalizado)
                        hoy_idx = now.weekday()
                        dias_hasta = (idx - hoy_idx) % 7
                        if dias_hasta == 0:
                            dias_hasta = 7
                        dia_objetivo = (now + timedelta(days=dias_hasta)).date()
                    except ValueError:
                        return f"‚ùå No reconozco el d√≠a '{dia_detectado}'. Usa: hoy, ma√±ana, lunes, martes, etc."

                slots_dia = [s for s in slots if s.date() == dia_objetivo]
                if not slots_dia:
                    return f"üòî No hay horarios disponibles el {dia_detectado}. ¬øQuer√©s elegir otro d√≠a?"
                # Guardar selecci√≥n gen√©rica y slots con paginaci√≥n (20 por p√°gina)
                titulo = business_context.get("titulo_turno_directo") or "Turno"
                self.redis_client.set(f"servicio_seleccionado:{telefono}", json.dumps({"id": 0, "nombre": titulo}), ex=1800)
                all_key = f"slots_all:{telefono}:0"
                page_key = f"slots_page:{telefono}:0"
                size_key = f"slots_page_size:{telefono}:0"
                page_size = 20
                self.redis_client.set(all_key, json.dumps([s.isoformat() for s in slots_dia]), ex=1800)
                self.redis_client.set(page_key, json.dumps(0), ex=1800)
                self.redis_client.set(size_key, json.dumps(page_size), ex=1800)
                first_page = slots_dia[:page_size]
                slots_key = f"slots:{telefono}:0"
                slots_data = [{
                    "numero": i,
                    "fecha_hora": slot.isoformat(),
                    "empleado_id": None,
                    "empleado_nombre": "Sistema"
                } for i, slot in enumerate(first_page, 1)]
                self.redis_client.set(slots_key, json.dumps(slots_data), ex=1800)
                respuesta = f"{self._emoji_for_service(titulo)} *Horarios para {titulo}* el {dia_detectado}:\n\n"
                respuesta += "\n".join([f"{i}. {datetime.fromisoformat(s['fecha_hora']).strftime('%H:%M')}" for i, s in enumerate(slots_data, 1)])
                if len(slots_dia) > len(first_page):
                    respuesta += "\n\nüìù Escribe 'm√°s' para ver m√°s horarios."
                respuesta += "\n\nüí¨ Escribe el n√∫mero o la hora que prefieres."
                return respuesta
        
        # üîß DETECCI√ìN DE SELECCI√ìN DE SERVICIO (solo si NO tiene servicio guardado)
        servicio_seleccionado = None
        
        print(f"üîß DEBUG: Mensaje recibido: '{mensaje}' - Servicios disponibles: {[s['nombre'] for s in business_context['servicios']]}")
        
        # Verificar si es un n√∫mero
        if mensaje_stripped.isdigit():
            try:
                posicion = int(mensaje_stripped)
                if 1 <= posicion <= len(business_context['servicios']):
                    servicio_seleccionado = business_context['servicios'][posicion - 1]
                    print(f"üîß DEBUG: Servicio seleccionado por n√∫mero {posicion}: {servicio_seleccionado['nombre']} (ID: {servicio_seleccionado['id']})")
            except:
                pass

        # Si no es n√∫mero, buscar por nombre de servicio
        if not servicio_seleccionado:
            for servicio in business_context['servicios']:
                nombre_servicio = servicio['nombre'].lower()
                # Buscar coincidencia exacta o parcial
                if (mensaje_stripped == nombre_servicio or 
                    mensaje_stripped in nombre_servicio or 
                    nombre_servicio in mensaje_stripped):
                    servicio_seleccionado = servicio
                    print(f"üîß DEBUG: Servicio seleccionado por nombre: {servicio_seleccionado['nombre']} (ID: {servicio_seleccionado['id']})")
                    break
                # Coincidencia por tokens (normalizada)
                try:
                    import unicodedata
                    def _norm(s: str) -> str:
                        s = (s or "").lower().strip()
                        return ''.join(c for c in unicodedata.normalize('NFD', s) if unicodedata.category(c) != 'Mn')
                    nmsg = _norm(mensaje_stripped)
                    nname = _norm(nombre_servicio)
                    tokens = [t for t in re.split(r"\s+", nname) if len(t) > 2]
                    if tokens:
                        overlap = sum(1 for t in tokens if t in nmsg)
                        if overlap >= min(2, len(tokens)):
                            servicio_seleccionado = servicio
                            print(f"üîß DEBUG: Servicio seleccionado por tokens: {servicio_seleccionado['nombre']} (ID: {servicio_seleccionado['id']})")
                            break
                except Exception:
                    pass

        # Si encontr√≥ un servicio
        if servicio_seleccionado:
            # üîß VERIFICAR SI ES INFORMATIVO
            es_informativo = servicio_seleccionado.get('es_informativo', False)
            print(f"üîß DEBUG: Servicio {servicio_seleccionado['nombre']} - Es informativo: {es_informativo}")

            if es_informativo:
                mensaje_personalizado = (servicio_seleccionado.get('mensaje_personalizado') or '').strip()
                if mensaje_personalizado:
                    if self._wants_more_info(mensaje_stripped):
                        return self._add_help_footer(f"‚ÑπÔ∏è *{servicio_seleccionado['nombre']}*\n\n{mensaje_personalizado}\n\nüìÖ ¬øQuer√©s ver horarios?")
                    else:
                        breve = self._first_paragraphs(mensaje_personalizado, max_paragraphs=2, max_chars=420)
                        return self._add_help_footer(f"‚ÑπÔ∏è *{servicio_seleccionado['nombre']}*\n\n{breve}\n\nüëâ Decime ‚Äúm√°s info‚Äù si quer√©s el detalle completo, o pedime horarios.")
                else:
                    return self._add_help_footer(f"‚ÑπÔ∏è *{servicio_seleccionado['nombre']}* es un servicio informativo.\n\nüí¨ ¬øEn qu√© m√°s puedo ayudarte?")

            # üîß ENRIQUECER DESCRIPCI√ìN DESDE informacion_local SI FALTA
            if not (servicio_seleccionado.get('mensaje_personalizado') or '').strip():
                extra = self._extract_service_info_from_tenant_info(servicio_seleccionado['nombre'], business_context.get('informacion_local') or '')
                if extra:
                    servicio_seleccionado['mensaje_personalizado'] = extra

            # üîß GUARDAR SERVICIO SELECCIONADO Y PREGUNTAR D√çA
            servicio_key = f"servicio_seleccionado:{telefono}"
            self.redis_client.set(servicio_key, json.dumps(servicio_seleccionado), ex=1800)  # 30 min

            # Tarjeta informativa breve antes de pedir el d√≠a
            tarjeta = self._respuesta_info_servicio(servicio_seleccionado, business_context, full=False, add_footer=False)
            pregunta = self._preguntar_dia_disponible(servicio_seleccionado, telefono)
            return f"{tarjeta}\n\n{pregunta}"
        
    # ÔøΩ FILTRO PREVIO: Detectar consultas claramente ajenas al negocio
        palabras_ajenas = [
            'receta', 'cocina', 'comida', 'guiso', 'ingredientes', 'cocinar',
            'amor', 'vida', 'consejo', 'salud', 'medicina', 'doctor',
            'clima', 'tiempo', 'lluvia', 'sol', 'temperatura',
            'deportes', 'futbol', 'partido', 'juego',
            'politica', 'presidente', 'gobierno', 'elecciones',
            'matematicas', 'fisica', 'quimica', 'estudio', 'tarea',
            'musica', 'cancion', 'banda', 'artista',
            'pelicula', 'serie', 'actor', 'actriz'
        ]
        
        if any(palabra in mensaje_stripped for palabra in palabras_ajenas):
            return self._add_help_footer(f"Lo siento, solo puedo ayudarte con reservas y servicios de {tenant.comercio}. ¬øNecesitas hacer una reserva o consultar nuestros servicios?")
        
        # ÔøΩüîß RESTO DEL PROCESAMIENTO CON IA
        # Construir contexto para la IA
        system_prompt = f"""ü§ñ Eres la IA asistente de {tenant.comercio} EXCLUSIVAMENTE para reservas, servicios e informaci√≥n del negocio.

‚ö†Ô∏è RESTRICCI√ìN CR√çTICA: SOLO responde sobre:
- Reservas de turnos/citas
- Servicios disponibles ({', '.join([s['nombre'] for s in business_context['servicios']])})
- Cancelaciones de reservas
- Consultas sobre horarios disponibles
- Informaci√≥n del negocio, biograf√≠a del profesional y datos de contacto/ubicaci√≥n de {tenant.comercio}

üö´ NO RESPONDAS NUNCA A:
- Recetas de cocina
- Consejos de vida (salvo que est√©n expl√≠citamente en la informaci√≥n del negocio)
- Preguntas generales no relacionadas con el negocio
- Temas ajenos a reservas, servicios o informaci√≥n del negocio
- Consultas sobre otros temas

Si te preguntan algo no relacionado, responde:
"Lo siento, solo puedo ayudarte con reservas, servicios o informaci√≥n de {tenant.comercio}. ¬øNecesitas hacer una reserva o consultar nuestros servicios?"

üìä INFORMACI√ìN DEL NEGOCIO:
- üè¢ Nombre: {tenant.comercio}
- ‚ú® Servicios disponibles: {', '.join([s['nombre'] for s in business_context['servicios']])}
- üë• Empleados: {', '.join([e['nombre'] for e in business_context['empleados']]) if business_context['empleados'] else 'Sin empleados (servicios directos)'}
- üìç Direcci√≥n: {business_context.get('direccion') or 'N/D'}
- üìû Tel√©fono: {business_context.get('telefono') or 'N/D'}
- üìù Info del local (resumen): {(business_context.get('informacion_local') or '')[:800]}

üë§ INFORMACI√ìN DEL CLIENTE (üìû {telefono}):
- üîÑ Cliente recurrente: {'üéØ S√≠' if user_history['es_cliente_recurrente'] else 'üÜï No (cliente nuevo)'}
- ‚≠ê Servicio favorito: {user_history['servicio_favorito'] or 'ü§∑ Ninguno a√∫n'}
- üìÖ Reservas activas: {len(user_history['reservas_activas'])}
- üìä Historial: {len(user_history['historial'])} reservas anteriores

üìã INSTRUCCIONES IMPORTANTES:
1. üòä S√© natural, amigable y personalizada. Usa emojis apropiados
2. üéØ Usa la informaci√≥n del cliente para personalizar respuestas
3. üìã Cuando te pidan un turno, muestra los servicios numerados (1, 2, 3...)
4. üî¢ Si el usuario dice un n√∫mero, usa la funci√≥n buscar_horarios_servicio con el ID REAL
5. üèÜ SERVICIOS CON SUS IDs REALES:
{self._format_servicios_with_real_ids(business_context['servicios'])}
6. üß† Recuerda conversaciones anteriores
7. ‚ùì SOLO responde preguntas sobre el negocio y servicios
8. üìÖ Si el usuario menciona un d√≠a espec√≠fico (hoy, ma√±ana, lunes, martes, mi√©rcoles, jueves, viernes, s√°bado, domingo, fecha espec√≠fica (DD/MM)), usa ese d√≠a en preferencia_fecha
9. üö´ NO busques horarios cuando pregunten por sus reservas actuales o c√≥digos de cancelaci√≥n
10. üí¨ Si preguntan por turnos activos/reservas, indica que pueden cancelar enviando solo el c√≥digo
11. üö´ No inventes servicios ni menciones servicios que no est√©n en la lista disponible.
12. üìù Si piden informaci√≥n sobre un servicio, usa mensaje_personalizado de ese servicio si existe. Si no, usa nombre, duraci√≥n y precio.
13. üè¢ Si piden informaci√≥n general (qui√©n es, sobre, contacto, direcci√≥n, horarios), responde usando la informaci√≥n del negocio proporcionada.

üõ°Ô∏è SEGURIDAD CR√çTICA:
- ‚ö†Ô∏è NUNCA muestres informaci√≥n de reservas de otros n√∫meros de tel√©fono
- üö´ Si preguntan por reservas de otro usuario, responde: "Por seguridad, solo puedo mostrar TUS reservas"
- üîê Solo ayuda con reservas del n√∫mero actual: {telefono}

üß† CONTEXTO INTELIGENTE:
- üîç Si el usuario dice "no tengo los c√≥digos" despu√©s de preguntar por otro n√∫mero, NO asumas que quiere hacer una reserva nueva
- üí¨ Pregunta qu√© necesita espec√≠ficamente: "¬øNecesitas ayuda con TUS reservas o quieres hacer una nueva?"
- üéØ Mant√©n el contexto de la conversaci√≥n anterior

üõ†Ô∏è FUNCIONES DISPONIBLES:
- üîç buscar_horarios_servicio: Para mostrar horarios disponibles (usa el ID real del servicio y preferencia_fecha si el usuario especifica un d√≠a)
- ‚ùå cancelar_reserva: Para cancelar reservas existentes

‚ö†Ô∏è IMPORTANTE: NO puedes crear reservas directamente. El flujo de reserva se maneja autom√°ticamente cuando el usuario selecciona horario y proporciona su nombre.

üí° IMPORTANTE: Este negocio {'tiene empleados' if business_context['tiene_empleados'] else 'NO tiene empleados'}.
"""

        # Construir historial de conversaci√≥n
        messages = [{"role": "system", "content": system_prompt}]
        
        # Agregar historial reciente (√∫ltimos 10 mensajes)
        recent_history = conversation_history[-10:] if len(conversation_history) > 10 else conversation_history
        for msg in reversed(recent_history):
            messages.append({
                "role": msg["role"],
                "content": msg["content"]
            })

        # Agregar mensaje actual
        messages.append({"role": "user", "content": mensaje})

    # Definir funciones disponibles - SOLO buscar horarios, NO crear reservas
        functions = [
            {
                "name": "buscar_horarios_servicio",
                "description": "Buscar horarios disponibles para un servicio espec√≠fico",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "servicio_id": {"type": "integer", "description": "ID REAL del servicio en la base de datos"},
                        "preferencia_horario": {"type": "string", "description": "ma√±ana, tarde, noche o cualquiera"},
                        "preferencia_fecha": {"type": "string", "description": "hoy, ma√±ana, lunes, martes, mi√©rcoles, jueves, viernes, s√°bado, domingo, fecha espec√≠fica (DD/MM), esta_semana o cualquiera"},
                        "cantidad": {"type": "integer", "description": "Cantidad de personas", "default": 1}
                    },
                    "required": ["servicio_id"]
                }
            },
            {
                "name": "cancelar_reserva",
                "description": "Cancelar una reserva existente",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "codigo_reserva": {"type": "string", "description": "C√≥digo de la reserva"}
                    },
                    "required": ["codigo_reserva"]
                }
            }
        ]

        try:
            response = self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=messages,
                functions=functions,
                function_call="auto",
                temperature=0.3,
                max_tokens=800
            )

            message = response.choices[0].message

            # Si la IA quiere ejecutar una funci√≥n
            if message.function_call:
                function_name = message.function_call.name
                function_args = json.loads(message.function_call.arguments)

                # Ejecutar la funci√≥n
                function_result = await self._execute_ai_function(
                    {"name": function_name, "args": function_args},
                    telefono, business_context, tenant, db
                )

                return function_result

            # Respuesta directa de la IA
            return message.content

        except Exception as e:
            print(f"‚ùå Error en OpenAI: {e}")
            return self._generar_respuesta_fallback(mensaje, user_history, business_context)
    
    def _format_servicios_with_real_ids(self, servicios: list) -> str:
        """
        Devuelve una lista de servicios con sus IDs reales para mostrar al usuario.
        """
        if not servicios:
            return "No hay servicios disponibles."
        lines = []
        for s in servicios:
            lines.append(f"{s['id']}: {s['nombre']}")
        return "\n".join(lines)
    
    def mostrar_servicios(self, business_context: dict) -> str:
        """Devuelve la lista de servicios disponibles para mostrar al cliente (siempre actualizada)."""
        servicios = business_context["servicios"]
        if not servicios:
            if business_context.get("modo_directo"):
                return (
                    "‚ú® Reservas directas disponibles.\n\n"
                    "Decime ‚Äòhoy‚Äô, ‚Äòma√±ana‚Äô o un d√≠a (lunes, martes, ‚Ä¶) y te muestro horarios."
                )
            return "No hay servicios disponibles en este momento."
        # Mostrar servicios numerados y por nombre, sin duplicados ni nombres err√≥neos
        lines = []
        for idx, s in enumerate(servicios, 1):
            lines.append(f"{idx}. {s['nombre']}")
        return f"‚ú® Servicios disponibles:\n" + "\n".join(lines) + "\n\nüí¨ Escribe el n√∫mero o nombre del servicio que te interesa."

    def _get_business_context(self, tenant, db):
        """Obtener contexto del negocio: servicios y empleados desde models.py"""
        from api.app.models import Servicio, Empleado
        servicios_db = db.query(Servicio).filter(Servicio.tenant_id == tenant.id).all()
        empleados_db = db.query(Empleado).filter(Empleado.tenant_id == tenant.id).all()
        
        # Convertir objetos a diccionarios
        servicios = []
        for s in servicios_db:
            servicios.append({
                "id": s.id,
                "nombre": s.nombre,
                "precio": getattr(s, "precio", 0),
                "duracion": getattr(s, "duracion", 60),
                "es_informativo": getattr(s, "es_informativo", False),
                "mensaje_personalizado": getattr(s, "mensaje_personalizado", ""),
                "working_hours": getattr(s, "working_hours", None),
                "calendar_id": getattr(s, "calendar_id", None),
                "turnos_consecutivos": getattr(s, "turnos_consecutivos", False),
            })
        
        empleados = []
        for e in empleados_db:
            empleados.append({
                "id": e.id,
                "nombre": e.nombre,
                "email": getattr(e, "email", ""),
                "telefono": getattr(e, "telefono", "")
            })
        
        # Determinar si no hay empleados ni servicios para activar modo directo
        modo_directo = (len(servicios) == 0 and len(empleados) == 0)

        return {
            "servicios": servicios,
            "empleados": empleados,
            "tiene_empleados": len(empleados) > 0,
            "calendar_id_general": getattr(tenant, "calendar_id_general", None),
            # Informaci√≥n adicional para respuestas ricas
            "informacion_local": getattr(tenant, "informacion_local", None),
            "telefono": getattr(tenant, "telefono", None),
            "direccion": getattr(tenant, "direccion", None),
            "comercio": getattr(tenant, "comercio", None),
            "working_hours_general": getattr(tenant, "working_hours_general", None),
            # Campos de reservas directas
            "modo_directo": modo_directo,
            "calendar_id_directo": getattr(tenant, "calendar_id_directo", None),
            "duracion_turno_directo": getattr(tenant, "duracion_turno_directo", None),
            "precio_turno_directo": getattr(tenant, "precio_turno_directo", None),
            "solo_horas_exactas_directo": getattr(tenant, "solo_horas_exactas_directo", False),
            "turnos_consecutivos_directo": getattr(tenant, "turnos_consecutivos_directo", False),
            "working_hours_directo": getattr(tenant, "working_hours_general", None),
            "titulo_turno_directo": (tenant.comercio or "Turno"),
        }

    async def cancelar_reserva(self, codigo_reserva: str, telefono: str, db: Session):
        """Cancelar una reserva por c√≥digo"""
        try:
            # üîí SEGURIDAD REFORZADA: Buscar la reserva con m√∫ltiples filtros de seguridad
            now_aware = datetime.now(self.tz)
            
            reserva = db.query(Reserva).filter(
                Reserva.fake_id == codigo_reserva,  # C√≥digo espec√≠fico
                Reserva.cliente_telefono == telefono,  # üîí Solo del tel√©fono del usuario
                Reserva.estado == "activo",  # Solo activas
                Reserva.fecha_reserva > now_aware  # üìÖ Solo futuras
            ).first()
            
            if not reserva:
                return self._add_help_footer(f"‚ùå No encontr√© la reserva con c√≥digo `{codigo_reserva}` o no se puede cancelar.\n\n_Verifica que el c√≥digo sea correcto y que la reserva sea futura._")
            
            # üîí VERIFICACI√ìN ADICIONAL: Confirmar que es del mismo tel√©fono
            if reserva.cliente_telefono != telefono:
                print(f"üö® INTENTO DE ACCESO NO AUTORIZADO: {telefono} intent√≥ cancelar reserva de {reserva.cliente_telefono}")
                return self._add_help_footer("‚ùå No tienes autorizaci√≥n para cancelar esta reserva.")
            
            # Verificar si se puede cancelar (debe ser con al menos 1 hora de anticipaci√≥n)
            if not self._puede_cancelar_reserva(reserva.fecha_reserva, now_aware):
                tiempo_restante = (self._normalize_datetime(reserva.fecha_reserva) - now_aware).total_seconds() / 60
                return self._add_help_footer(f"‚ùå No puedes cancelar reservas con menos de 1 hora de anticipaci√≥n.\n\n_Tu reserva es en {int(tiempo_restante)} minutos._")
            
            # Intentar cancelar en Google Calendar si existe
            if reserva.event_id:
                from api.utils import calendar_utils
                # Usar el empleado_calendar_id que ya est√° guardado en la reserva
                calendar_utils.cancelar_evento_google(
                    reserva.empleado_calendar_id,
                    reserva.event_id,
                    self.google_credentials
                )
            
            # Actualizar estado en la base de datos
            reserva.estado = "cancelado"
            db.commit()
            
            return f"‚úÖ *Reserva cancelada correctamente*\n\nüìÖ {reserva.servicio} el {reserva.fecha_reserva.strftime('%d/%m %H:%M') if reserva.fecha_reserva else ''}\nüîñ C√≥digo: `{codigo_reserva}`\n\nüòä ¬°Esperamos verte pronto!\n\nüí¨ _¬øNecesitas ayuda personalizada? Escribe 'ayuda persona' para hablar con nuestro equipo._"
            
        except Exception as e:
            print(f"‚ùå Error cancelando reserva: {e}")
            return self._add_help_footer(f"‚ùå Error al cancelar la reserva: {str(e)}")

    def _extract_service_info_from_tenant_info(self, nombre_servicio: str, tenant_info: str) -> str | None:
        """Intenta extraer un fragmento relevante sobre un servicio desde la informaci√≥n general del negocio.
        Busca el nombre del servicio de forma insensible a may√∫sculas/acentos y devuelve un p√°rrafo cercano.
        """
        if not tenant_info or not nombre_servicio:
            return None
        import unicodedata, re
        def normalize(s: str) -> str:
            return ''.join(c for c in unicodedata.normalize('NFD', s.lower()) if unicodedata.category(c) != 'Mn')
        info_norm = normalize(tenant_info)
        name_norm = normalize(nombre_servicio)
        idx = info_norm.find(name_norm)
        if idx == -1:
            # probar con alias simples (e.g., tre)
            tokens = [t.strip() for t in re.split(r"[:\-\n]", name_norm) if t.strip()]
            for tok in tokens:
                j = info_norm.find(tok)
                if j != -1:
                    idx = j
                    break
        if idx == -1:
            return None
        # Tomar ventana desde inicio de secci√≥n hasta pr√≥ximo doble salto de l√≠nea o 1000 chars
        start = max(0, info_norm.rfind('\n\n', 0, idx))
        end = info_norm.find('\n\n', idx)
        if end == -1:
            end = min(len(info_norm), idx + 1200)
        # Mapear √≠ndices normalizados a originales (aproximaci√≥n: usar mismos √≠ndices sobre texto original si longitudes iguales tras normalizaci√≥n de acentos)
        # Como aproximaci√≥n simple, tomamos misma ventana sobre texto original por posiciones cercanas
        # Para evitar desalineaci√≥n por remoci√≥n de acentos, expandimos un poco los l√≠mites
        start_orig = max(0, start - 50)
        end_orig = min(len(tenant_info), end + 50)
        snippet = tenant_info[start_orig:end_orig].strip()
        # Limpiar encabezados redundantes
        snippet = re.sub(r"\n{3,}", "\n\n", snippet)
        return snippet if snippet else None